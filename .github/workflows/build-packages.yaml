# This workflow will build packages (either install/deploy) and scan code. The code repository has the files:
#  buildscripts/build.sh and buildscripts/scan.sh
# build_target of 'deploy' will install as well as publish a package to the artifact repository specified in the corresponding pom.xml.
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build packages

on:
  workflow_call:
    inputs:
      build_type:
        required: true
        type: string
        description: "The type of build - maven | node | sbt | 'maven node' | 'gradle' | 'gradle node' | 'sbt ruby' | java | 'node java', etc."
      build_target:
        required: false
        type: string
        default: install
        description: "Build target - install | deploy for maven, local | remote for node"
      java_version:
        required: false
        type: string
        default: '8'
        description: "Version of Java, if used"
      node_version:
        required: false
        type: string
        default: '11'
        description: "Version of Node, if used"
      gradle_version:
        required: false
        type: string
        default: ''
        description: "Version of gradle, if needed"
      skip_scanning:
        required: false
        type: boolean
        default: false
        description: "Skip scanning - true | false"
      working_directory:
        required: false
        type: string
        default: '.'
        description: "Working directory for the run steps"
      submodules:
        required: false
        type: string
        default: false
        description: "true, if git submodules are part of the repository; recursive, if there are recursive submodules"
      cache_dependency_path:
        required: false
        type: string
        default: '.'
        description: "Cache dependency path, where applicable, e.g. **/package.json for node"
      store_artifacts:
        required: false
        type: boolean
        default: false
        description: "Store build artifacts - true | false"
      artifacts_name:
        required: false
        type: string
        default: ''
        description: "Stored artifacts name, if needed"
      sonar_host_url:
        required: false
        type: string
        default: ''
        description: "Sonar host URL for code analysis, if given"
    secrets:
      packages_user:
        required: true
        description: "Github packages user"
      packages_access_token:
        required: true
        description: "Gihub packages access token"
      sonar_access_token:
        required: false
        description: "SonarQube access token - required if scanning"
    outputs:
      app_version:
        value: ${{ jobs.install_packages.outputs.app_version }}
        description: "Application version"
      short_commit_sha:
        value: ${{ jobs.install_packages.outputs.short_commit_sha }}
        description: "Short commit SHA"


jobs:
  install_packages:
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: Build, scan and test (optional)
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.vars.outputs.app_version }}
      short_commit_sha: ${{ steps.vars.outputs.short_commit_sha }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: ${{ inputs.submodules }}
          token: ${{ secrets.packages_access_token }}
      - name: Get Java cache variable
        id: java_cache
        run:  echo "cache_type=$( ( [[ '${{ inputs.build_type }}' == *maven* ]] && echo 'maven' ) || ( [[ '${{ inputs.build_type }}' == *gradle* ]] && echo 'gradle' ) || echo '' )" >> $GITHUB_OUTPUT
      - name: Set up Java with/without cache
        if: ${{ contains(inputs.build_type, 'maven') || contains(inputs.build_type, 'gradle') || contains(inputs.build_type, 'sbt') || contains(inputs.build_type, 'java') }}
        uses: actions/setup-java@v3
        with:
          java-version: '${{ inputs.java_version }}'
          distribution: 'temurin'
          cache: ${{ steps.java_cache.outputs.cache_type }}
      - name: Install sbt
        if: ${{ contains(inputs.build_type, 'sbt') }}
        uses: coursier/setup-action@v1
        with:
          apps: sbt
      - name: Cache SBT & Ivy
        if: ${{ contains(inputs.build_type, 'sbt') }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
          key: sbt-cache-${{ runner.os }}-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('**/build.properties') }}
          restore-keys: |
            sbt-cache-${{ runner.os }}-
      - uses: gradle/gradle-build-action@v2
        if: ${{ contains(inputs.build_type, 'gradle') && inputs.gradle_version != '' }}
        with:
          gradle-version: ${{ inputs.gradle_version }}
      - name: Set up Node
        if: ${{ contains(inputs.build_type, 'node') }}
        uses: actions/setup-node@v2
        with:
          node-version: '${{ inputs.node_version }}'
          cache: 'npm'
          cache-dependency-path: '${{ inputs.cache_dependency_path }}'
      - name: Set up ruby
        if: ${{ contains(inputs.build_type, 'ruby') }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'
          bundler-cache: true
      - name: Get build variables
        id: vars
        working-directory: ${{ inputs.working_directory }}
        run: |
          echo "app_version=$(buildscripts/getversion.sh)"  >> $GITHUB_OUTPUT
          echo "short_commit_sha=$(git rev-parse --short HEAD)"  >> $GITHUB_OUTPUT
      - name: Build packages
        working-directory: ${{ inputs.working_directory }}
        run: buildscripts/build.sh ${{ inputs.build_target }} ${{ steps.vars.outputs.app_version }} ${{ secrets.packages_user }} ${{ secrets.packages_access_token }}
      - name: Set up JDK 11 for SonarQube scanner # Java 11 is required, at a minimum, for SonarQube 9.x scanners
        if: ${{ inputs.java_version == '8' || inputs.java_version == '9' || inputs.java_version == '10' }}
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'
          cache: ${{ steps.java_cache.outputs.cache_type }}
      - name: Cache SonarQube packages
        if: ${{ inputs.java_version == '8' || inputs.java_version == '9' || inputs.java_version == '10' }}
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Scan code
        if: ${{ !(inputs.skip_scanning || inputs.sonar_host_url == '' ) }}
        working-directory: ${{ inputs.working_directory }}
        run: buildscripts/scan.sh ${{ steps.vars.outputs.app_version }} ${{ steps.vars.outputs.short_commit_sha }} ${{ secrets.sonar_access_token }} ${{ inputs.sonar_host_url }}
      - name: Copy artifacts (optional)
        if: ${{ inputs.store_artifacts }}
        working-directory: ${{ inputs.working_directory }}
        run: buildscripts/copyartifacts.sh __artifacts
      - name: Upload artifacts (optional)
        if: ${{ inputs.store_artifacts }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifacts_name }}
          path: ${{ inputs.working_directory }}/__artifacts
          retention-days: 1