# This workflow will build packages (either install/deploy) and scan code. The code repository has the files:
#  buildscripts/build.sh and buildscripts/scan.sh
# build_target of 'deploy' will install as well as publish a package to the artifact repository specified in the corresponding pom.xml.
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build packages

on:
  workflow_call:
    inputs:
      build_type:
        required: true
        type: string
        description: "The type of build - maven | node | 'maven node' | 'gradle' | 'gradle node', etc."
      build_target:
        required: false
        type: string
        default: install
        description: "Build target - install | deploy for maven, local | remote for node"
      java_version:
        required: false
        type: string
        default: '8'
        description: "Version of Java, if used"
      node_version:
        required: false
        type: string
        default: '11'
        description: "Version of Node, if used"
      skip_scanning:
        required: false
        type: boolean
        default: false
        description: "Skip scanning - true | false"
      working_directory:
        required: false
        type: string
        default: '.'
        description: "Working directory for the run steps"
      submodules:
        required: false
        type: string
        default: false
        description: "true, if git submodules are part of the repository; recursive, if there are recursive submodules"
      cache_dependency_path:
        required: false
        type: string
        default: '.'
        description: "Cache dependency path, where applicable, e.g. **/package.json for node"
      store_artifacts:
        required: false
        type: boolean
        default: false
        description: "Store build artifacts - true | false"
      artifacts_name:
        required: false
        type: string
        default: ''
        description: "Stored artifacts name, if needed"
    secrets:
      packages_user:
        required: true
        description: "Github packages user"
      packages_access_token:
        required: true
        description: "Gihub packages access token"
      sonar_access_token:
        required: false
        description: "SonarQube access token - required if scanning"
    outputs:
      app_version:
        value: ${{ jobs.install_packages.outputs.app_version }}
        description: "Application version"
      short_commit_sha:
        value: ${{ jobs.install_packages.outputs.short_commit_sha }}
        description: "Short commit SHA"


jobs:
  install_packages:
    name: Build, scan and test (optional)
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.vars.outputs.app_version }}
      short_commit_sha: ${{ steps.vars.outputs.short_commit_sha }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: ${{ inputs.submodules }}
          token: ${{ secrets.packages_access_token }}
      - name: Set up Java with Maven cache
        if: ${{ contains(inputs.build_type, 'maven') }}
        uses: actions/setup-java@v3
        with:
          java-version: '${{ inputs.java_version }}'
          distribution: 'temurin'
          cache: 'maven'
      - name: Set up Java with Gradle cache
        if: ${{ contains(inputs.build_type, 'gradle') }}
        uses: actions/setup-java@v3
        with:
          java-version: '${{ inputs.java_version }}'
          distribution: 'temurin'
          cache: 'gradle'
      - name: Set up Node
        if: ${{ contains(inputs.build_type, 'node') }}
        uses: actions/setup-node@v2
        with:
          node-version: '${{ inputs.node_version }}'
          cache: 'npm'
          cache-dependency-path: '${{ inputs.cache_dependency_path }}'
      - name: Get build variables
        id: vars
        working-directory: ${{ inputs.working_directory }}
        run: |
          echo "::set-output name=app_version::$(buildscripts/getversion.sh)"
          echo "::set-output name=short_commit_sha::$(git rev-parse --short HEAD)"
      - name: Build packages
        working-directory: ${{ inputs.working_directory }}
        run: buildscripts/build.sh ${{ inputs.build_target }} ${{ steps.vars.outputs.app_version }} ${{ secrets.packages_user }} ${{ secrets.packages_access_token }}
      - name: Scan code
        if: ${{ !inputs.skip_scanning }}
        working-directory: ${{ inputs.working_directory }}
        run: buildscripts/scan.sh ${{ steps.vars.outputs.app_version }} ${{ steps.vars.outputs.short_commit_sha }} ${{ secrets.sonar_access_token }}
      - name: Copy artifacts (optional)
        if: ${{ inputs.store_artifacts }}
        working-directory: ${{ inputs.working_directory }}
        run: buildscripts/copyartifacts.sh __artifacts
      - name: Upload artifacts (optional)
        if: ${{ inputs.store_artifacts }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifacts_name }}
          path: ${{ inputs.working_directory }}/__artifacts
          retention-days: 1