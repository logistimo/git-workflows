# A workflow to build a docker image and pushes to container registry (AWS ECR)

name: Docker build and push

on:
  workflow_call:
    inputs:
      artifacts_name:
        required: true
        type: string
        description: "Key to artifacts cache to download build artifacts"
      remove_artifacts:
        required: false
        type: boolean
        default: true
        description: "true | false - if true, removes the cached artifacts"
      repository_name:
        required: true
        type: string
        description: "Name of the repository for the docker image"
      image_tag:
        required: true
        type: string
        description: "Image tag"
      build_arguments:
        required: false
        type: string
        default: ''
        description: "Docker build arguments such as '--build-arg=X=Y --build-arg=A=B'"
      external_image_name:
        required: false
        type: string
        default: ''
        description: "Name of an externally built container image file, say, snapshot, as built by, say, jib"
      external_image_file:
        required: false
        type: string
        default: ''
        description: "Externally built container image file as a compressed tar file, tar.gz , say, snapshot.tar.gz - obtained via docker save"
      aws_region:
        required: true
        type: string
        description: "AWS region such as us-east-1"
    secrets:
      aws_access_key_id:
        required: true
        description: "AWS IAM user's access key ID"
      aws_secret_access_key:
        required: true
        description: "AWS IAM user's secret access key"
      slack_bot_token:
        required: false
        description: "Slack bot token, if provided, will notify image tags to slack builds channel"

jobs:
  build_push_image:
    name: Build and push image to AWS ECR
    if: github.actor != "dependabot[bot]"
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifacts_name }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ inputs.aws_region }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.repository_name }}
          IMAGE_TAG: ${{ inputs.image_tag }}
          BRANCH_TAG: ${{ github.ref_name }}
        run: |
          if [ -z "${{ inputs.external_image_file }}" ]
          then
            echo "Building docker image..."
            docker build ${{ inputs.build_arguments }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG .
          else
            echo "Loading external docker image file" ${{ inputs.external_image_file }} "..."
            docker load --input ${{ inputs.external_image_file }}
            echo "Tagging external docker image" ${{ inputs.external_image_name }} "..."
            docker tag ${{ inputs.external_image_name }} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker tag ${{ inputs.external_image_name }} $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG
          fi
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          echo "Pushed image with tags" $IMAGE_TAG "and" $BRANCH_TAG
      - name: Remove artifacts (optional)
        if: ${{ inputs.remove_artifacts }}
        uses: geekyeggo/delete-artifact@v1
        with:
          name: ${{ inputs.artifacts_name }}
      - name: Notify success to Slack 'builds'
        if: ${{ job.status == 'success' }}
        uses: slackapi/slack-github-action@v1.19.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: 'C03EN50UX0C'
          # For posting a simple plain text message
          slack-message: "Pushed ${{ inputs.repository_name }} image with tags ${{ inputs.image_tag }}, ${{ github.ref_name }}\nhttps://github.com/${{ github.repository_owner }}/${{ inputs.repository_name }}/runs/${{ github.run_id }}?check_suite_focus=true"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack_bot_token }}
      - name: Notify failure to Slack 'builds'
        if: ${{ job.status == 'failure' }}
        uses: slackapi/slack-github-action@v1.19.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: 'C03EN50UX0C'
          # For posting a simple plain text message
          slack-message: "Image build failed for ${{ inputs.repository_name }} with tags ${{ inputs.image_tag }}, ${{ github.ref_name }}\nhttps://github.com/${{ github.repository_owner }}/${{ inputs.repository_name }}/runs/${{ github.run_id }}?check_suite_focus=true"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack_bot_token }}